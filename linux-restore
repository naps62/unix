#!/bin/bash

###################################################
### helper functions                            ###
###################################################

function usage {
	cat <<EOF
linux-restore [-m <machine-name>] [-c] [-y]

   -m <machine-name> machine config to use. defaults to "default"
   -y skip confirmations
   -b backup every replaced file
   -h show this
EOF
	
}

function die {
    echo >&2 "$@"
    exit 1
}

# currently just an alias to `echo`
function log {
	echo "$@"
}

# creates a symlink backing up original dest file if it exists
function ln_bak {
	src=$1
	dst=$2
	# backup current file if exists
	if [ -e $dst ]; then
		rm -rf $dst.bak
		if ! $clean; then
			mv $dst $dst.bak
		else
			rm -rf $dst
		fi
	fi

	# create link
	ln -s $src $dst
}

# asks for confirmation on a task. executes function if positive
function op_ask {
	prompt=$1
	function=$2

	yes=false

	if ! $force_yes; then
		# read arg
		op="dummy"
		until [[ $op =~ ^[yYnN]$ ]]; do
			read -p "$1 [y/n] " op
		done

		# check confirmation and exec function
		if [[ $op =~ ^[yY]$ ]]; then
			$function
		fi
	else
		yes=true
	fi

	if $yes; then
		$function
	fi
}

# receives 4 args
# VAR, placeholder, value, file
# uncomments export for VAR on file
# repaces placeholder by value
function set_env {
	var=$1
	val=$2

	# file is $myrc by default, or $3 if provided
	file=$myrc
	[ $# -eq 2 ] || file=$3

	sed -i "s,^#\?\(export $var\)$,\1=${val//\\/\\\\}," $file
}

# same as set_env, but for non exported variables
function set_not_env {
	var=$1
	val=$2

	# file is $myrc by default, or $3 if provided
	file=$myrc
	[ $# -eq 2 ] || file=$3

	sed -i "s,^#\?\($var\)$,\1=${val//\\/\\\\}," $file	
}


###################################################
### Parse Args                                  ###
###################################################

# argument string for getopts
opts="hm:by"

machine_name="default"
force_yes=false
clean=true

while getopts $opts option; do
	case $option in
		m)
			machine_name=$OPTARG
			;;
		by)
			clean=false
			;;
		y)
			force_yes=true
			;;
		h)
			usage
			exit
			;;
		?)
			usage
			die "error: invalid argument $OPTARG"
			;;
	esac
done


###################################################
### Initial Setup                               ###
###################################################

# by default, installs for current user
user=`whoami`

# path to home dir of user
home="/home/$user"

# path for the global symlink that will be created
config="$home/.config"
mkdir -p $config
myconfig="$config/linux-restore"
machine="$myconfig/machines/$machine_name"

# custom rc file
myrc="$home/.naps62rc"

# absolute path to this script
abspath="$(cd "${0%/*}" 2>/dev/null; echo "$PWD")"


log "installing for $user"

#
# create global symlink
#
if [ ! -d $config ]; then
	log "$config dir does not yet exist. creating"
fi

log "global symlink will be on $myconfig"
ln_bak $abspath $myconfig

log "installing..."

###################################################
### rc installation                             ###
###################################################

# creates ~/.naps62rc
# this file is machine dependent and is not intended to be changed
# so there is no problem in generating it instead of hard-creating
log "   .naps62rc"
cp $myconfig/files/rc/naps62rc.template $myrc
set_env 'NAPS62_CONFIGDIR'  "$myconfig"
set_env 'NAPS62_RCDIR'      "$myconfig/files/rc"
set_env 'NAPS62_MACHINE'    "$machine_name"
set_env 'NAPS62_MACHINEDIR' "$machine"

log "   .bashrc"
ln_bak $myconfig/files/rc/bashrc $home/.bashrc


###################################################
### sym links                                   ###
###################################################

log "   .vimrc"
ln_bak $myconfig/files/rc/vimrc $home/.vimrc

log "   .gitconfig"
ln_bak $myconfig/files/rc/gitconfig $home/.gitconfig

log "   .gemrc"
ln_bak $myconfig/files/rc/gemrc $home/.gemrc

log "   .vim/"
ln_bak $myconfig/files/vim $home/.vim

log "   .bin/"
ln_bak $myconfig/files/bin $home/.bin

log "   .ssh/"
ln_bak $myconfig/files/ssh $home/.ssh

# fix ssh dir permissions
chmod 700 $home/.ssh
chmod 644 $home/.ssh/id_rsa.pub

###################################################
### apt packages instalation                    ###
###################################################

function apt_packages {
	sudo aptitude --yes update
	cat $machine/apt_packges.list | xargs sudo aptitude --yes install
}


###################################################
### misc configs                                ###
###################################################

log "   allowing core dumps"
ulimit -c unlimited

#log "   configuring git globals and alias"
#git config --global user.name 'Miguel Palhas'
#git config --global user.email 'mpalhas@gmail.com'

#log "   git configuration"
#git config --global alias.lg \
#	"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
#git config --global color.ui
#git config --global core.editor vim




###################################################
### machine custom script                       ###
###################################################

. $machine/install.sh

source $home/.bashrc

log "all done!"
