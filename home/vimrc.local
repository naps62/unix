" vim: set sw=2 ts=2 sts=2 et foldmarker={,} foldlevel=0 foldmethod=marker spell:

" Overrides {
  UnBundle 'myusuf3/numbers.vim'
  UnBundle 'nathanaelkane/vim-indent-guides'

  set background=light
  let g:spf13_no_autochdir = 1  " don't auto switch current dir to newly opened buffers
  let g:neocomplcache_disable_auto_complete = 1 " disable autocomplete
  let g:NERDTreeWinPos = "right"

  let g:ctrlp_root_markers = ['.ctrlp']

  set tabstop=2        " TAB character width
  set expandtab        " expand tabs to spaces by default (overriden in some languages)
  set shiftwidth=2     " sets what happens on line shift
  set softtabstop=2    " what happens on TAB or BS
  set history=1000     " boost history (20 to 1000)
  set scrolljump=1     " lines to scroll when cursor leaves screen
  set scrolloff=3      " minimum lines to keep above and below cursor

" }

" KeyBindings {
  let mapleader=','

  " fix command typos
  nmap ; :

  " multiple leader options
  nmap \ <leader>

  " Ctrl+S for saving
  nmap <silent> <C-S> :update<CR>
  vmap <silent> <C-S> <C-c>:update<CR>
  imap <silent> <C-S> <C-o>:update<CR>

  " Make
  nmap <silent> <C-M> :Make<CR>

  " Quickfix
  nmap <silent> <leader>h :cprevious<CR>
  nmap <silent> <leader>l :cnext<CR>

  " Tabs
  nmap <silent> <leader>w :tabclose<CR>

  nmap <silent> <leader><Space> :nohlsearch<Bar>:echo<CR>  " space to disable search highligh
  nmap <silent> <leader>n :set hls!<CR>            " press Ctrl-n to toogle search highlight
  nmap <leader>s :set list!<CR>                    " toggle whitespace\s
  nmap <silent> <c-n> :NERDTreeToggle<CR>          " press CTRL-N to enable NERDTree

  " move between windows
  nmap <C-Right> <c-w>l
  nmap <C-Left>  <c-w>h
  nmap <C-Up>    <c-w>k
  nmap <C-Down>  <c-w>j

  " move between tabs
  nmap <C-a>  gT
  nmap <C-d>  gt
  nmap <C-t>  :tabnew<cr>
  imap <C-t>  <ESC>:tabnew<cr>

  " double TAB to recursively toogle all code folds at current cursor
  nmap <Tab><Tab> zA<CR>

" }

" File type handling {
  " automatically give executable permissions if file begins with #!
  au BufWritePost * if getline(1) =~ "^#!" | silent !chmod +x <afile>

  " custom syntax extensions
  au BufNewFile,BufRead *.cu	set ft=cuda
  au BufNewFile,BufRead *.cuh set ft=cuda
  augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
  augroup END

  " fix for vim-latex
  let g:tex_flavor='latex'
" }

" Autocomplete {
  " ruby
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
" }

" Make & Quickfix {
  fun! SetMkfile()
    let filemk = "makefile"
    let pathmk = "./"
    let depth = 1
    while depth < 5
      if filereadable(pathmk . filemk)
        return pathmk
      endif
      let depth += 1
      let pathmk = "../" . pathmk
    endwhile
    return "."
  endf

  command! -nargs=* Make tabnew | let $mkpath = SetMkfile() | silent make <args> -C $mkpath | cwindow 10"

" }

" Cursor Type {
  " color
  if &term =~ "xterm\\|rxvt"
    let &t_SI = "\<Esc>]12;orange\x7" " use an orange cursor in insert mode
    let &t_EI = "\<Esc>]12;red\x7"    " use a red cursor otherwise
    " reset cursor when vim exits
    autocmd VimLeave * silent !echo -ne "\033]112\007"
  endif
" }

