" .vimrc
" Vim configuration file
" Miguel Palhas (credits to André Santos, mostly based on his own vimrc) ...
" ... Ok it's almost completely copied from him. But i'm not ashamed of myself
" 21-03-2012

" See: http://vimdoc.sourceforge.net/htmldoc/options.html for details

""""""""""""""""""""""""""""""""""""""""
" General stuff
""""""""""""""""""""""""""""""""""""""""
call pathogen#infect()

"foldstart
" Tyrb iff compatibility mode (necessary for lots of other cool stuff, don't ask what)
set nocompatible

" Turn off message 'Thanks for flying vim'
set notitle
" set title

" Set leader
" The leader character is your own personal modifier key
" default is \
let mapleader = '\'

" Show line numbers (iff = set nonumber)
set number

" Use incremental search (search while you type)
set incsearch
" Hightligh search results
set hlsearch
" Case insensitive searches
set ignorecase
" If search pattern contains upper case characters, search becomes case sensitive again
set smartcase

" Allow Vim to manage multiple buffers effectively
" 1. The current buffer can be put to the background without writing to disk
" 2. When a background buffer becomes current again, marks and undo-history
" are remembered
set hidden

" Boost history (20 to 1000)
set history=1000

" Extend % to switch among if/elsif/else/end, XML tags, ...
" % normally switches between opening and colsing brackets
runtime ~/.vim/plugin/matchit.vim

" Make tab in command mode smarter and similar to shell
set wildmenu
set wildmode=list:longest

" Intuitive backspacing in insert mode
set backspace=indent,eol,start

" keep a backup file in ~/.vim/backup
set backup
set backupdir=~/.vim/backup

" persistent undo
" allows to undo even after closing vim or even
" shutting down the computer
"runtime ~/.vim/plugin/undofile.vim
if v:version >= 730
	set undofile
	set undodir=~/.vim/undo
endif

" remember some stuff after quitting vim:
" marks, registers, searches, buffer list
"set viminfo='20,<50,s10,h,%
 
" Show (partial) command in status line
set showcmd
 
" Set options for autoformatting text
" r -> Automatically insert current comment leader after a newline when in Insert mode
set formatoptions=r
 
" Show line and column number of current cursor position
set ruler
 
" Enable use of mouse
set mouse=a

" Language settings for the spell checker
setlocal spell spelllang=en_us
" setlocal spell spelllang=pt_pt
" Use spell checkers
set nospell

" automatically give executable permissions if file begins with #!
" au BufWritePost * if getline(1) =~ "^#!" | silent !chmod +x <afile> | endif
" TODO error bin/bash endif

"foldend

""""""""""""""""""""""""""""""""""""""""
" Syntax highlighting
""""""""""""""""""""""""""""""""""""""""
"foldstart
" Turn on syntax highlighting
syntax on

"foldend

""""""""""""""""""""""""""""""""""""""""
" Visual
""""""""""""""""""""""""""""""""""""""""
"foldstart

" Use a dark background (options are dark or light)
set background=dark

" Colorscheme to use (default works well on crunchbang)
" TODO test this in other distros
"colorscheme custom_desert
colorscheme custom_desert

" Options if gui is enabled (gvim i guess?)
if has("gui_running")
      set guioptions=egmrt
      set guioptions-=r 
endif

" tell VIM to always put a status line in, even if there is only one window
set laststatus=2

" Custom status line
set stl=
set stl +=%y\ 
set stl +=[%f]\ 
set stl +=%r\ 
set stl +=Buf:#%n\ 
set stl +=%=Line:%3l/%3L[%3p%%]\ 
set stl +=%=Col:%3v\ 

" get rid of the silly characters in separators
set fillchars = ""

" Honestly can't remember what this is
" TODO figure this out
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Custom syntax extensions
au BufNewFile,BufRead *.cu	set ft=cuda
au BufNewFile,BufRead *.cuh set ft=cuda
au BufNewFile,BufRead *.geo set ft=c

"foldend

""""""""""""""""""""""""""""""""""""""""
" Useless stuff
""""""""""""""""""""""""""""""""""""""""
"foldstart

let g:SokobanLevelDirectory = "/home/naps62/.vim/sokoban_levels/"

"foldend

""""""""""""""""""""""""""""""""""""""""
" Indenting
""""""""""""""""""""""""""""""""""""""""
"foldstart

" Auto indent when editing
set copyindent
set autoindent
" Each saving tab has 4 character length, but IS NOT 4 spaces
set tabstop=4
set shiftwidth=4
set noexpandtab
set smartindent
set smarttab

"foldend

""""""""""""""""""""""""""""""""""""""""
" Key bindings
""""""""""""""""""""""""""""""""""""""""
"foldstart

" Fix command typos (stolen from André Santos, who stole Adam Katz)
nmap ; :

" Press F4 to toogle search highlight
nmap <silent> <leader>n :set hls!<CR>

" mx adds a mark on the current line and column (x may be any letter)
" 'x will jump to the line and column marked with mx
" `x will jump to the line and column marked with mx
" defaults are switched
nnoremap ' `
nnoremap ` '

" Activate/deactivate paste mode
nmap <leader>p :set paste!<CR>

" Double click Shift-X to force quit
" DANGEROUS!
" TODO test this later
" nmap <S-x><S-x> :q!<CR>

" Repeat last collon (:) command
nmap <leader>. @:

" if modifier to if block
" TODO dafuq is this?
" map <leader>if V:s/\(\s*\)	if \(.*\);/\1if (\2) {/<CR>kVdp>>$a;<CR><BS>}<CR><Esc>kkk^

" Shortcut to rapidly toogle `set list`
" shows invisible characters
nmap <leader>s :set list!<CR>
set listchars=tab:>-,eol:$

" Use the same symbols as TextMate for tabstopts and EOLs
" TODO test this
" set listchars=tab:▸\ ,eol:¬

"foldend

""""""""""""""""""""""""""""""""""""""""
" Keybindings (my own now)
""""""""""""""""""""""""""""""""""""""""
"foldstart

" make
" <C-m> already defaults to :make
nmap <leader>m :make vim<CR>
nmap <silent> <F5> :make vim<CR>

" Press \j to toogle spell checking
nmap <leader>j :set nospell!<CR>

" Press CTRL-N to enable NERDTree. 
nmap <silent> <c-n> :NERDTreeToggle<CR>

" Press CTRL-W to switch between windows.
nmap <silent> <c-w> <C-W><C-W>
nmap <silent> <c-j> <c-W>j<c-W>_
nmap <silent> <c-k> <c-W>k<c-W>_

" Press Space to disable highlighting.
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" Double Tab to recursively toogle all code folds at current cursor
nmap <Tab><Tab> zA<CR>

" Open saved session list
nmap <leader>p :OpenSession<CR>

" Close saving session
nmap SQ SaveSessionAndExit()



"foldend

""""""""""""""""""""""""""""""""""""""""
" Compiling / Debug keybindings
""""""""""""""""""""""""""""""""""""""""
"foldstart

" compile program, and open quickfix list if there are erros
nmap <leader>d :make<CR> :cw<CR>

" Jump to previous/next error in quickfix list using Backspace/Enter key
nmap <leader><BS> :cp<CR>
nmap <leader><CR> :cn<CR>

" Open Pyclewn without screwing up NERDTree
nmap <leader>g <c-n>:call OpenPyclewn()<CR><c-n><c-w>

" Set a breakpoint on current line
nmap <F8> :exe "Cbreak " . expand("%:p") . ":" . line(".")<CR>
" Delete a breakpoint on the current lint
nmap <F7> :exe "Cclear " . expand("%:p") . ":" . line(".")<CR>

"foldend

""""""""""""""""""""""""""""""""""""""""
" CTAGS / CSCOPE keybindings
""""""""""""""""""""""""""""""""""""""""
"foldstart

" double leader defaults to cscope Find Symbol
nmap <leader><leader> <C-]>

" Goto source & Goto definition
" This assume there are at most 2 definitions of current symbol
" 1 goes to source
" 2 goes to header
"nmap <leader>s <C-\>s<CR>1<CR>
"nmap <leader>d <C-\>d<CR>2<CR>


"foldend

""""""""""""""""""""""""""""""""""""""""
" Motion and text wrap
""""""""""""""""""""""""""""""""""""""""
"foldstart

" Don't visually break lines in the middle of worlds
set lbr

" Set arrow keys up and down to move between screen lines
" map: Normal, Visual, Operator-pending
map <down> gj
map <up> gk
" imap: Insert
imap <ip> <ESC>gka
imap <down> <ESC>gja

" Allow cursor motion to wrap
set ww=b,s,<,>,[,]

" Scroll margin 10 lines
set scrolloff=8

" Break lines longer than 70
" :set wrapmargin=180

"foldend

""""""""""""""""""""""""""""""""""""""""
" File type handling
""""""""""""""""""""""""""""""""""""""""
"foldstart

" Use plugins according to filetypes
filetype on
filetype plugin on
filetype indent on
" Use latin1 (ISO-88509-1) text encoding
"  set enc=latin1
" or UTF-8
"  set enc=utf-8
set fileencodings=ucs-bom,utf-8,latin1

" These settings are needed for latex-suite
" TODO test this
" filetype indent on
" let g:tex_flavor='latex'
" set grepprg=grep\ -nH\ $*
"
" let g:Tex_Folding=0 " I don't like folding
" set iskeyword+=:

" Treat extension X as files of type TYPE
" autocmd! BufNewFile,BufRead *.X setlocal ft=TYPE

" fix for vim-latex
let g:tex_flavor='latex'

"foldend

""""""""""""""""""""""""""""""""""""""""
" NERDTree
""""""""""""""""""""""""""""""""""""""""
"foldstart

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Auto open NERDTree on vim startup
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p

" Set NERDtree width
let NERDTreeWinSize=16

" Show hidden files in NERDTree
" let NERDTreeShowHidden=1

" Hide some files and filetypes
let NERDTreeIgnore=['^\.git$', '^\.gitignore$', '\~$']

"foldend

""""""""""""""""""""""""""""""""""""""""
" Code Folding
""""""""""""""""""""""""""""""""""""""""
"foldstart

set nofoldenable        " no enable fold by default
set foldmethod=syntax 	" fold based on syntax
set foldnestmax=10   	" max nested folds

" These commands open folds
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo

:highlight FoldColumn guifg=Black guibg=Black 
:highlight Folded guifg=Black guibg=Black 

" C#-like folding regions
syn region cRegionMacro start="#pragma region" end="#pragma endregion" transparent keepend extend fold

" custom folding for vim files (vimrc)
syn region vimrcRegion start=/"foldstart/ end=/"foldend/ transparent keepend extend fold

"foldend

""""""""""""""""""""""""""""""""""""""""
" Autocomplete
""""""""""""""""""""""""""""""""""""""""
"foldstart

"ruby
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

"improve autocomplete menu color
highlight Pmenu ctermbg=238 gui=bold

"foldend
"
""""""""""""""""""""""""""""""""""""""""
" Sessions
""""""""""""""""""""""""""""""""""""""""
"foldstart

" save local options along with session (needed to remember file syntax)
set sessionoptions+=localoptions

" save session with SQ
function! SaveSessionAndQuit()
	:SaveSession
	:wqa
endfunction

" Remember cursor position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif


"foldend

""""""""""""""""""""""""""""""""""""""""
" Pyclewn
""""""""""""""""""""""""""""""""""""""""
"foldstart

" Close netbeans socket if no GDB window is left open
autocmd BufHidden (clewn)_console nbclose

"foldend

""""""""""""""""""""""""""""""""""""""""
" Functions and external commands
""""""""""""""""""""""""""""""""""""""""
"foldstart

function! OpenPyclewn()
	:Pyclewn
	:Cecho \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBad Luck Brian says: Hey there! Running int trouble with your code again uh?\n
endfunction


function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" Andrefs smart indentation: edit with tabs, save with spaces
" I dont need this stuff, just saved it here for documentation/credits and because i can
"autocmd BufWritePre Makefile let b:afs_noSmartTabIndent=1
"autocmd BufWritePre makefile let b:afs_noSmartTabIndent=1
" Flag if file has been edited+saved
"
"autocmd BufWritePre * let b:afs_edited=1
" autocmd BufWinLeave * buffers 
" autocmd BufWinLeave * buffer 3 | buffers
" autocmd BufWinLeave * buffers | echo '%'expand('<abuf>') | buffer expand('<abuf>') | buffers
" if !exists('b:afs_noSmartTabIndent')
" 	Convert space-indentation to tab-indentation when opening file
" 	autocmd BufWinEnter * set noexpandtab
" 	autocmd BufWinEnter * exe 'retab!'
" 	Convert tab-indentation to space-indentation when quiting single file
" 	if exists('b:afs_edited')
" 		"autocmd BufUnload * let b:afs_curbuf=expand('<afile>')
" 		autocmd BufUnload * buffer <afile>
"   	autocmd BufWinLeave * buffer  | set expandtab | exe 'retab!w' | :write
" 	endif
" endif

"foldend

